generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum SignInType {
    GOOGLE_OAUTH
    EMAIL_PASSWORD
    FACEBOOK_OAUTH
}

model User {
    id             String       @id @default(auto()) @map("_id") @db.ObjectId
    email          String       @unique @db.String // Unique email
    passwordHash   String?      @db.String // Securely hashed passwords
    username       String?      @db.String // Optional name
    fullName       String?      @db.String
    profilePicture String?      @db.String // Optional profile picture URL
    signinType     SignInType
    isActive       Boolean      @default(true) // Account activation status
    deleted_at     DateTime?
    role           Role         @relation(fields: [roleId], references: [id]) // User's role
    roleId         String       @db.ObjectId
    metadata       Json? // Flexible metadata storage
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    Preference     Preference[]
}

model Role {
    id          String       @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
    name        String       @unique @db.String // Role name, e.g., "admin", "editor", "user"
    User        User[]
    permissions Permission[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Permission {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
    name      String   @unique @db.String // Permission name, e.g., "READ_ARTICLES"
    Role      Role?    @relation(fields: [roleId], references: [id])
    roleId    String?  @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Preference {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    locations   String[]
    categories  String[]
    dateRange   DateRange? @relation(fields: [dateRangeId], references: [id])
    dateRangeId String?    @db.ObjectId
    includeFree Boolean    @default(false)
    user        User       @relation(fields: [userId], references: [id])
    userId      String     @unique @db.ObjectId
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model DateRange {
    id         String       @id @default(auto()) @map("_id") @db.ObjectId
    startDate  DateTime
    endDate    DateTime
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    Preference Preference[]
}
